#gpgclear=$(gpg-connect-agent reloadagent /bye > /dev/null)
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh
export whoami=$(whoami)

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) /'
}

atlasenv() {
source /Users/$whoami/.virtualenvs/atlas-dev/bin/activate
export ANSIBLE_VAULT_PASSWORD=$(gpg -d /Users/$whoami/.ansible/ansible_pwd.gpg)
export VIRTUALENV=$(echo $VIRTUAL_ENV | sed 's:.*/::')
PS1='\e[0;91m*** \e[0;91mDEIS=\e[0;93m$DEIS_PROFILE \e[0;91mAWS=\e[0;93m$AWS\e[0;91m***\e[m \e[0,92m($VIRTUALENV)\e[m
$(parse_git_branch)
$PWD> '
}

devopstoolsenv() {
source /Users/$whoami/.virtualenvs/devops_tools/bin/activate
export VIRTUALENV=$(echo $VIRTUAL_ENV | sed 's:.*/::')
PS1='\e[0;91m*** \e[0;91mDEIS=\e[0;93m$DEIS_PROFILE \e[0;91mAWS=\e[0;93m$AWS\e[0;91m***\e[m \e[0,92m($VIRTUALENV)\e[m
$(parse_git_branch)
$PWD> '
}

essexenv() {
source /Users/$whoami/.virtualenvs/essex-dev/bin/activate
export VIRTUALENV=$(echo $VIRTUAL_ENV | sed 's:.*/::')
PS1='\e[0;91m***\e[0;91mAWS=\e[0;93m$AWS\e[0;91m***\e[m \e[0,92m($VIRTUALENV)\e[m 
$(parse_git_branch)
$PWD> '
}

PS1='\e[0;91m*** \e[0;91mDEIS=\e[0;93m$DEIS_PROFILE \e[0;91mAWS=\e[0;93m$AWS\e[0;91m***\e[m
$(parse_git_branch)
$PWD> '

complete -C '/usr/local/bin/aws_completer' aws


alias composer="php /usr/local/bin/composer.phar"
alias git=hub
alias kc-sys='kubectl --namespace=kube-system'

set_aws() {
    pwd=$(gpg -d ~/.aws/${1}.gpg)
    export AWS_ACCESS_KEY_ID=$(echo $pwd | awk '{print $1}') 
    export AWS_SECRET_ACCESS_KEY=$(echo $pwd | awk '{print $2}') 
    export AWS=${1}
    #export AWS_PROFILE=${1}
}

dc() {
    options=(
    "ctfeature2-one"
    "ctstage-one"
    "ctprod-one"
    "htvqa2-one"
    "htvstage-one"
    "htvprod-two"
    "stage-one"
    "prod-one"
    "htvfeature-one"
    "htvload-one"
    "stage-two"
    "feature-one"
    "htvload-one"
)

echo "Choose DEIS profile"
PS3="Input number for selection: "
WARNING="\033[92m Setting the associated AWS Profile\033[m"
select opt in "${options[@]}" "Abort"; do

    case "$REPLY" in
    1 ) if [[ $AWS != ctgdev ]]; then 
            echo -e $WARNING
            set_aws ctgdev
            export DEIS_PROFILE=${options[0]}
            echo -e "\033[92m SSHKey: test-deis.pem"
        else 
            export DEIS_PROFILE=${options[0]} 
            echo -e "\033[92m SSHKey: test-deis.pem"
            fi; break;;
    2 ) if [[ $AWS != ctgmediaosprod ]]; then 
            echo -e $WARNING
            set_aws ctgmediaosprod
            export DEIS_PROFILE=${options[1]}
            echo -e "\033[92m SSHKey: ctstage-deis.pem"
        else 
            export DEIS_PROFILE=${options[1]} 
            echo -e "\033[92m SSHKey: ctstage-deis.pem"
            fi; break;;
    3 ) if [[ $AWS != ctgmediaosprod ]]; then 
            echo -e $WARNING
            set_aws ctgmediaosprod
            export DEIS_PROFILE=${options[2]}
            echo -e "\033[92m SSHKey: ctprod-deis.pem"
        else 
            export DEIS_PROFILE=${options[2]} 
            echo -e "\033[92m SSHKey: ctprod-deis.pem"
            fi; break;;
    4 ) if [[ $AWS != htvdev ]]; then 
            echo -e $WARNING
            set_aws htvdev
            export DEIS_PROFILE=${options[3]}
        else 
            export DEIS_PROFILE=${options[3]}
            echo -e "\033[92m SSHKey: hearstdev.pem"
            fi; break;;
    5 ) if [[ $AWS != htvmediaosprod ]]; then 
            echo -e $WARNING
            set_aws htvmediaosprod
            export DEIS_PROFILE=${options[4]}
            echo -e "\033[92m SSHKey: htvstage-deis.pem"
        else 
            export DEIS_PROFILE=${options[4]}
            echo -e "\033[92m SSHKey: htvstage-deis.pem"
            fi; break;;
    6 ) if [[ $AWS != htvmediaosprod ]]; then 
            echo -e $WARNING
            set_aws htvmediaosprod
            export DEIS_PROFILE=${options[5]}
            echo -e "\033[92m SSHKey: htvprod-deis.pem"
        else 
            export DEIS_PROFILE=${options[5]}
            echo -e "\033[92m SSHKey: htvprod-deis.pem"
            fi; break;;
    7 ) if [[ $AWS != mediaosdevstage ]]; then 
            echo -e $WARNING
            set_aws mediaosdevstage
            export DEIS_PROFILE=${options[6]}
            echo -e "\033[92m SSHKey: stage-deis-20160603.pem"
        else 
            export DEIS_PROFILE=${options[6]}
            echo -e "\033[92m SSHKey: stage-deis-20160603.pem"
            fi; break;;
    8 ) if [[ $AWS != hdm2prod ]]; then 
            echo -e $WARNING
            set_aws hdm2prod
            export DEIS_PROFILE=${options[7]}
            echo -e "\033[92m SSHKey: prod-deis-20160603.pem"
        else 
            export DEIS_PROFILE=${options[7]}
            echo -e "\033[92m SSHKey: prod-deis-20160603.pem"
            fi; break;;
    9 ) if [[ $AWS != htvdev ]]; then
            echo -e $WARNING
            set_aws htvdev
            export DEIS_PROFILE=${options[8]}
            echo -e "\033[92m SSHKey: htvfeature-deis.pem"
        else
            export DEIS_PROFILE=${options[8]}
            echo -e "\033[92m SSHKey: htvfeature-deis.pem"
            fi; break;;

     10 ) if [[ $AWS != htvmediaosprod ]]; then
            echo -e $WARNING
            set_aws htvmediaosprod
            export DEIS_PROFILE=${options[9]}
            echo -e "\033[92m SSHKey: htvload-deis.pem"
        else
            export DEIS_PROFILE=${options[9]}
            echo -e "\033[92m SSHKey: htvload-deis.pem"
            fi; break;;

     11 ) if [[ $AWS != mediaosdevstage ]]; then
            echo -e $WARNING
            set_aws mediaosdevstage
            export DEIS_PROFILE=${options[10]}
            echo -e "\033[92m SSHKey: loadtest-deis-20160603.pem"
        else
            export DEIS_PROFILE=${options[10]}
            echo -e "\033[92m SSHKey: loadtest-deis-20160603.pem"
            fi; break;;

     12 ) if [[ $AWS != mediaosdevstage ]]; then
            echo -e $WARNING
            set_aws mediaosdevstage
            export DEIS_PROFILE=${options[11]}
            echo -e "\033[92m SSHKey: feature-deis-20160603.pem"
        else
            export DEIS_PROFILE=${options[11]}
            echo -e "\033[92m SSHKey: feature-deis-20160603.pem"
            fi; break;;
        
     13 ) if [[ $AWS != htvmediaosprod ]]; then
             echo -e $WARNING
             set_aws htvmediaosprod
             export DEIS_PROFILE=${options[12]}
             echo -e "\033[92m SSHKey: htvload-deis.pem"
         else
             export DEIS_PROFILE=${options[12]}
             echo -e "\033[92m SSHKey: htvload-deis.pem"
             fi; break;;

    $(( ${#options[@]}+1 )) ) echo "Aborted!"; break;;
    *) echo "Invalid option. Try another one.";continue;;

    esac

done
}

dp () {
   deis whoami
}

export FLEETCTL_TUNNEL=localhost:5532
export FLEETCTL_STRICT_HOST_KEY_CHECKING=false


awscreds() {
    options=(
    "ctgdev"
    "ctgmediaosprod"
    "htvdev"
    "htvmediaosprod"
    "mediaosdevstage"
    "hdm2prod"
)

echo "Choose AWS profile"
PS3="Input number for selection: "
select opt in "${options[@]}" "Abort"; do

    case "$REPLY" in
    1 ) set_aws ${options[0]}; break;;
    2 ) set_aws ${options[1]}; break;;
    3 ) set_aws ${options[2]}; break;;
    4 ) set_aws ${options[3]}; break;;
    5 ) set_aws ${options[4]}; break;;
    6 ) set_aws ${options[5]}; break;;
   
    $(( ${#options[@]}+1 )) ) echo "Aborted!"; break;;
    *) echo "Invalid option. Try another one.";continue;;

    esac

done
}

testaws() {
    aws cloudformation list-stacks --query StackSummaries[].[StackName] --output text
}

refreshaws() {
    ~/code/atlas/provisioning/inventory/ec2.py --refresh-cache
}

destroy_exited() {
    docker rm -v $(docker ps -a -q -f "status=exited")
}


avv() {
    ansible-vault view --vault-password-file=provisioning/library/get_password.py $1
}

ave() {
    ansible-vault edit --vault-password-file=provisioning/library/get_password.py $1
}

set_vault() {
    pwd=$(gpg -d ~/vault.gpg)
    export VAULT_ADDR=https://vault.hearstapps.com
    export VAULT_USERNAME=$(echo $pwd | awk '{print $1}')
    export VAULT_PASSWORD=$(echo $pwd | awk '{print $2}')
    vault auth -method=userpass username=${VAULT_USERNAME} password=${VAULT_PASSWORD}
    }

vault_login() {
    token=$(gpg -d ~/github_token.gpg)
    export VAULT_ADDR=https://vault.hearstapps.com
    vault auth -method=github token=${token}
    }

gtoken() {
    export GITHUB_USER='keithmeng'
    export GITHUB_TOKEN=$(gpg -d ~/github_token.gpg)
   } 

nse() {
    docker exec -it $1 bash
    }

listdns() {
    aws route53 list-hosted-zones
}

listec2() {
    if [[ $1 == *pgbouncer* ]]; then
      aws ec2 describe-instances --filter "Name=tag-value,Values=$1" "Name=tag-value,Values=$2" --query "Reservations[].Instances[].[InstanceId,PrivateIpAddress,Tags[?Key=='Name'].Value[],Tags[?Key=='replica'].Value[]]"
    else
      aws ec2 describe-instances --filter "Name=tag-value,Values=$1" --query "Reservations[].Instances[].[InstanceId,PrivateIpAddress,Tags[?Key=='Name'].Value[]]"
    fi
}

rssh() {
    ip=$(aws ec2 describe-instances --filter "Name=instance-id,Values=$1" --query "Reservations[].Instances[].[PrivateIpAddress]" --output text)
    tag=$(aws ec2 describe-instances --filter "Name=instance-id,Values=$1" --query "Reservations[].Instances[].[Tags[?Key=='Name'].Value[]]" --output text)
    if [[ $tag == test* ]]; then
    ssh -F ~/.ssh/test-rover-config $ip 
    elif [[ $tag == dev* ]]; then
    ssh -F ~/.ssh/dev-rover-config $ip
    elif [[ $tag == stage* ]]; then
    ssh -F ~/.ssh/stage-rover-config $ip
    elif [[ $tag == load* ]]; then
    ssh -F ~/.ssh/load-rover-config $ip
    elif [[ $tag == prod* ]]; then
    ssh -F ~/.ssh/prod-rover-config $ip
   fi
}

listunits() {
    fleetctl list-units | grep $1 | awk '{print $2}' | sort | uniq -c
}

redistunnel() {
    if [[ ! -z $3 ]]; then
    ssh -F $3 -L 6379:$1:6379 core@$2
    else
    ssh -L 6379:$1:6379 core@$2
    fi
}

lpsql() {
    pushd ~/code/rover-mediaos-env
    TMPFILE=$(mktemp /tmp/PGPASS.XXXXX)
    blackbox_cat $1/env-encrypted > $TMPFILE
    cat $1/env-plaintext | grep DATABASE >> $TMPFILE
    source $TMPFILE
    rm $TMPFILE
    echo -e "Logging into \033[0;91m$DATABASE_HOST..\033[0m"
    export PGPASSWORD=$DATABASE_PASSWORD 
    export PGHOST=$DATABASE_HOST
    export PGUSER=$DATABASE_USER
    export PGDATABASE=$DATABASE_NAME
    psql 
    popd
    unset DATABASE_PASSWORD && unset DATABASE_HOST && unset DATABASE_USER && unset DATABASE_NAME && unset PGHOST && unset PGPASSWORD
}
   
kms_decrypt() {
docker run --rm -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION='us-east-1' quay.io/hearst/mediaos_devops_tools:develop /opt/golden_egg/bin/decrypt-blob -b "$1"
} 

getawsaccount(){
    aws sts get-caller-identity --output text --query 'Account'
}

purge(){
  key=$(gpg -d ~/htvfastly.gpg)
  curl -X PURGE -H Fastly-Key:$key $1
}

postgres_psql() {
    PGPASSWORD=$DATABASE_PASSWORD psql -h $DATABASE_HOST -U $DATABASE_USER -n $DATABASE_NAME
}
